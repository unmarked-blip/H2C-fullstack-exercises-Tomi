{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nyy\\\\Desktop\\\\H2C jutut\\\\Fullstack\\\\H2C-fullstack-exercises-Tomi\\\\part1\\\\unicafe\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Statistics = props => {\n  if (props.total === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No feedback given\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: [/*#__PURE__*/_jsxDEV(Statistic, {\n        name: \"good\",\n        value: props.good\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n        name: \"neutral\",\n        value: props.neutral\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n        name: \"bad\",\n        value: props.bad\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n        name: \"all\",\n        value: props.total\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n        name: \"average\",\n        value: props.average\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Statistic, {\n        name: \"positive\",\n        value: props.positive,\n        text: \"%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 7\n  }, this);\n};\n\n_c = Statistics;\n\nconst Statistic = props => {\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: [\" \", props.name, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: [\" \", props.value, \" \", props.text, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = Statistic;\n\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: props.handleClick,\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_c3 = Button;\n\nconst App = () => {\n  _s();\n\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total] = [good + neutral + bad];\n  const [average] = [(good - bad) / total];\n  const [positive] = [good / total * 100];\n\n  const increaseGood = () => setGood(good + 1);\n\n  const increaseNeutral = () => setNeutral(neutral + 1);\n\n  const increaseBad = () => setBad(bad + 1);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: increaseGood,\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: increaseNeutral,\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: increaseBad,\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Statistics, {\n      good: good,\n      neutral: neutral,\n      bad: bad,\n      total: total,\n      average: average,\n      positive: positive\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c4 = App;\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 71,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Statistics\");\n$RefreshReg$(_c2, \"Statistic\");\n$RefreshReg$(_c3, \"Button\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["C:/Users/nyy/Desktop/H2C jutut/Fullstack/H2C-fullstack-exercises-Tomi/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Statistics","props","total","good","neutral","bad","average","positive","Statistic","name","value","text","Button","handleClick","App","setGood","setNeutral","setBad","increaseGood","increaseNeutral","increaseBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\n\n\nconst Statistics = (props) => {\n  if (props.total === 0) {\n    return (\n      <div>\n        No feedback given\n      </div>\n    )\n  }\n    return (\n      <table>\n        <tbody>\n          <Statistic name = 'good' value = {props.good} /> \n          <Statistic name = 'neutral' value = {props.neutral} />\n          <Statistic name = 'bad' value = {props.bad} />\n          <Statistic name = 'all' value = {props.total} />\n          <Statistic name = 'average' value = {props.average} />\n          <Statistic name = 'positive' value = {props.positive} text = '%' />\n        </tbody>\n      </table>\n    )\n}\n\nconst Statistic = (props) => {\n  return (\n    <tr>\n      <td> {props.name} </td>\n      <td> {props.value} {props.text} </td>\n    </tr>  \n  )\n}\n\nconst Button = (props) => {\n  return (\n    <button onClick={props.handleClick}>\n      {props.text}\n    </button>\n  )\n}\n\nconst App = () => {\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const [total] = [good + neutral + bad]\n  const [average] = [(good - bad) / total]\n  const [positive] = [(good / total) * 100]\n  \n\n  const increaseGood = () => setGood(good +1)\n  const increaseNeutral = () => setNeutral(neutral + 1)\n  const increaseBad = () => setBad(bad +1)\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button handleClick={increaseGood} text='good' />\n      <Button handleClick={increaseNeutral} text='neutral' />\n      <Button handleClick={increaseBad} text='bad' />\n\n      <h1>statistics</h1>   \n      <Statistics good={good} neutral={neutral} bad={bad} total={total} average={average} positive={positive} />\n\n    </div>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n\n\n"]},"metadata":{},"sourceType":"module"}